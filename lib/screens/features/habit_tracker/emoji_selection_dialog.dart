import 'package:flutter/material.dart';

enum EmojiCategory {
  smileysPeople,
  animalsNature,
  foodDrink,
  activity,
  travelPlaces,
  objects,
  symbols,
  flags,
}

class EmojiSelectionDialog extends StatelessWidget {
  final String currentEmoji;

  const EmojiSelectionDialog({super.key, required this.currentEmoji});

  static const Map<EmojiCategory, List<String>> _categorizedEmojis = {
    EmojiCategory.smileysPeople: [
      '😊', '👍', '💪', '🚀', '💡', '📚', '🏃', '🧘', '🍎', '💧',
      '😴', '🌟', '🎉', '🔥', '🌱', '🧠', '💖', '✨', '🏆', '✅',
      '❌', '⏰', '🗓️', '📝', '📈', '🧘‍♀️', '🏋️‍♂️', '🚴‍♀️', '🏊‍♀️', '🚶‍♀️',
      '🍳', '🥗', '🥛', '🛌', '🚿', '☀️', '🌙', '⭐', '🌈', '🌧️',
      '💻', '📱', '🎧', '🎤', '🎨', '🎵', '🎬', '🎮', '🧩', '🎲',
      '🚗', '🚌', '🚆', '✈️', '🚢', '🏠', '🏢', '🏫', '🏥', '🏦',
      '🌳', '🌸', '🌊', '⛰️', '🏖️', '🏞️', '🌃', '🌆', '🌇', '🌅',
    ],
    EmojiCategory.animalsNature: [
      '🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🐯',
      '🦁', '🐮', '🐷', '🐸', '🐵', '🐔', '🐧', '🐦', '🦉', '🐺',
      '🐗', '🐴', '🦄', '🐝', '🐛', '🦋', '🐌', '🐞', '🐜', '🕷️',
      '🦂', '🦀', '🐍', '🦎', '🦖', '🦕', '🐢', '🐠', '🐡', '🐙',
      '🦑', '🦐', '🦞', '🐳', '🐬', '🦈', '🐊', '🐅', '🐆', '🦓',
      '🦍', '🐘', '🦏', '🐪', '🦒', '🐃', '🐄', '🐎', '🐖', '🐏',
      '🐑', '🐐', '🦌', '🐕', '🐩', '🐈', '🐓', '🦃', '🕊️', '🦅',
      '🦆', '🦢', '🦉', '🦩', '🦚', '🦜', '🐸', '🐊', '🐢', '🦎',
      '🐍', '🐉', '🐲', '🐳', '🐬', '🦈', '🐠', '🐡', '🐙', '🦑',
      '🦐', '🦞', '🦀', '🕷️', '🕸️', '🦂', '🦟', '🦠', '🦋', '🐛',
    ],
    EmojiCategory.foodDrink: [
      '🍎', '🍐', '🍊', '🍋', '🍌', '🍉', '🍇', '🍓', '🍈', '🍒',
      '🍑', '🥭', '🍍', '🥥', '🥝', '🍅', '🍆', '🥑', '🥦', '🥬',
      '🥒', '🌶️', '🌽', '🥕', '🥔', '🍠', '🥐', '🍞', '🥖', '🥨',
      '🧀', '🥚', '🍳', '🥓', '🥩', '🍗', '🍖', '🌭', '🍔', '🍟',
      '🍕', '🥪', '🥙', '🌮', '🌯', '🥗', '🍝', '🍜', '🍲', '🍛',
      '🍣', '🍱', '🥟', '🍤', '🍚', '🍙', '🍘', '🍥', '🍢', '🍡',
      '🍦', '🍧', '🍨', '🍩', '🍪', '🎂', '🍰', '🧁', '🥧', '🍫',
      '🍬', '🍭', '🍮', '🍯', '🍼', '🥛', '☕', '🍵', '🍶', '🍾',
      '🍷', '🍸', '🍹', '🍺', '🍻', '🥂', '🥃', '🥤', '🧃', '🧊',
    ],
    EmojiCategory.activity: [
      '⚽', '🏀', '🏈', '⚾', '🥎', '🎾', '🏐', '🏉', '🎱', '🏓',
      '🏸', '🏒', '🏑', '🥍', '🏏', '🥅', '⛳', '🏹', '🎣', '🥊',
      '🥋', '⛸️', '⛷️', '🏂', '🏋️', '🤸', '⛹️', '🤾', '🚴', '🚵',
      '🏎️', '🏍️', '🤸‍♂️', '🤸‍♀️', '⛹️‍♂️', '⛹️‍♀️', '🤾‍♂️', '🤾‍♀️', '🚴‍♂️', '🚴‍♀️',
      '🏊‍♂️', '🏊‍♀️', '🤽‍♂️', '🤽‍♀️', '🚣‍♂️', '🚣‍♀️', '🏇', '🏄‍♂️', '🏄‍♀️', '🧘‍♂️',
      '🧘‍♀️', '🧗‍♂️', '🧗‍♀️', '🤺', '🤼‍♂️', '🤼‍♀️', '👯‍♂️', '👯‍♀️', '🕺', '💃',
      '🎤', '🎧', '🥁', '🎷', '🎺', '🎸', '🎻', '🎹', '🎲', '🎯',
      '🎳', '🏓', '🏸', '🏒', '🏑', '🥍', '🏏', '🥅', '🏹', '🎣',
    ],
    EmojiCategory.travelPlaces: [
      '🚗', '🚕', '🚙', '🚌', '🚎', '🏎️', '🚓', '🚑', '🚒', '🚐',
      '🚚', '🚛', '🚜', '🛵', '🚲', '🏍️', '🚄', '🚅', '🚆', '🚇',
      '🚈', '🚉', '🚊', '🚋', '🚃', '🚞', '🚂', '🚆', '🚇', '🚈',
      '🚉', '🚊', '🚋', '🚃', '🚞', '🚂', '🚁', '✈️', '🛫', '🛬',
      '🚀', '🛰️', '🛸', '🚢', '🛳️', '🛥️', '🚤', '⚓', '⛵', '🛶',
      '🏖️', '🏝️', '🏞️', '⛰️', '🌋', '🗻', '🏕️', '⛺', '🛣️', '🛤️',
      '🌉', '🌃', '🏙️', '🌆', '🌇', '🌅', '🌄', '🌠', '🎇', '🎆',
      '🎑', '🏙️', '🌆', '🌇', '🌅', '🌄', '🌠', '🎇', '🎆', '🎑',
      '🏠', '🏡', '🏘️', '🏢', '🏣', '🏤', '🏥', '🏦', '🏨', '🏩',
      '🏪', '🏫', '🏬', '🏭', '🏯', '🏰', '💒', '🗼', '🗽', '⛪',
      '🕌', '🛕', '🕍', '⛩️', '🕋', '⛲', '⛺', '🚏', '🛑', '🚧',
    ],
    EmojiCategory.objects: [
      '⌚', '📱', '💻', '⌨️', '🖥️', '🖨️', '🖱️', '🖲️', '🕹️', '💽',
      '💾', '💿', '📀', '📼', '📷', '📸', '📹', '🎥', '📽️', '🎞️',
      '📞', '☎️', '📟', '📠', '📺', '📻', '🎙️', '🎚️', '🎛️', '🧭',
      '⏱️', '⏲️', '⏰', '🕰️', '⌛', '⏳', '💡', '🔦', '🔋', '🔌',
      '💻', '📱', '🎧', '🎤', '🥁', '🎷', '🎺', '🎸', '🎻', '🎹',
      '📚', '📖', '🔖', '🏷️', '💰', '🪙', '💵', '💴', '💶', '💷',
      '💳', '✉️', '📧', '📨', '📩', '📤', '📥', '📦', '📫', '📪',
      '📬', '📭', '📮', '🗳️', '✏️', '✒️', '🖋️', '🖊️', '🖌️', '🖍️',
      '📝', '💼', '📁', '📂', '🗂️', '📊', '📈', '📉', '📊', '📈',
    ],
    EmojiCategory.symbols: [
      '❤️', '🧡', '💛', '💚', '💙', '💜', '🖤', '🤍', '🤎', '💔',
      '❣️', '💕', '💞', '💓', '💗', '💖', '💘', '💝', '🧡', '💛',
      '💚', '💙', '💜', '🖤', '🤍', '🤎', '💯', '💢', '💥', '💫',
      '💦', '💨', '🕳️', '💣', '💬', '👁️‍🗨️', '💭', '💤', '☮️', '✝️',
      '☪️', '🕉️', '☸️', '✡️', '🔯', '🕎', '☯️', '☦️', '🛐', '⚛️',
      '☢️', '☣️', '⚠️', '🚸', '⛔', '🚫', '🚳', '🚭', '🚯', '🚱',
      '🚷', '📵', '🔞', '⬆️', '↗️', '➡️', '↘️', '⬇️', '↙️', '⬅️',
      '↖️', '↕️', '↔️', '↩️', '↪️', '⤴️', '⤵️', '🔃', '🔄', '🔙',
      '🔚', '🔛', '🔜', '🔝', '™️', '©️', '®️', '〰️', '〽️', '⁉️',
      '❓', '❔', '❕', '❗', '💯', '✅', '☑️', '✔️', '❌', '❎',
    ],
    EmojiCategory.flags: [
      '🏳️', '🏴', '🏁', '🚩', '🎌', '🇦🇨', '🇦🇩', '🇦🇪', '🇦🇫', '🇦🇬',
      '🇦🇮', '🇦🇱', '🇦🇲', '🇦🇴', '🇦🇶', '🇦🇷', '🇦🇸', '🇦🇹', '🇦🇺', '🇦🇼',
      '🇦🇽', '🇦🇿', '🇧🇦', '🇧🇧', '🇧🇩', '🇧🇪', '🇧🇫', '🇧🇬', '🇧🇭', '🇧🇮',
      '🇧🇯', '🇧🇱', '🇧🇲', '🇧🇳', '🇧🇴', '🇧🇶', '🇧🇷', '🇧🇸', '🇧🇹', '🇧🇻',
      '🇧🇼', '🇧🇾', '🇧🇿', '🇨🇦', '🇨🇨', '🇨🇩', '🇨🇫', '🇨🇬', '🇨🇭', '🇨🇮',
      '🇨🇰', '🇨🇱', '🇨🇲', '🇨🇳', '🇨🇴', '🇨🇵', '🇨🇷', '🇨🇺', '🇨🇻', '🇨🇼',
      '🇨🇽', '🇨🇾', '🇨🇿', '🇩🇪', '🇩🇬', '🇩🇯', '🇩🇰', '🇩🇲', '🇩🇴', '🇩🇿',
      '🇪🇦', '🇪🇨', '🇪🇪', '🇪🇬', '🇪🇭', '🇪🇷', '🇪🇸', '🇪🇹', '🇪🇺', '🇫🇮',
      '🇫🇯', '🇫🇰', '🇫🇲', '🇫🇴', '🇫🇷', '🇬🇦', '🇬🇧', '🇬🇩', '🇬🇪', '🇬🇫',
      '🇬🇬', '🇬🇭', '🇬🇮', '🇬🇱', '🇬🇲', '🇬🇳', '🇬🇵', '🇬🇶', '🇬🇷', '🇬🇸',
      '🇬🇹', '🇬🇺', '🇬🇼', '🇬🇾', '🇭🇰', '🇭🇲', '🇭🇳', '🇭🇷', '🇭🇹', '🇭🇺',
      '🇮🇨', '🇮🇩', '🇮🇪', '🇮🇱', '🇮🇲', '🇮🇳', '🇮🇴', '🇮🇶', '🇮🇷', '🇮🇸',
      '🇮🇹', '🇯🇪', '🇯🇲', '🇯🇴', '🇯🇵', '🇰🇪', '🇰🇬', '🇰🇭', '🇰🇮', '🇰🇲',
      '🇰🇳', '🇰🇵', '🇰🇷', '🇰🇼', '🇰🇾', '🇰🇿', '🇱🇦', '🇱🇧', '🇱🇨', '🇱🇮',
      '🇱🇰', '🇱🇷', '🇱🇸', '🇱🇹', '🇱🇺', '🇱🇻', '🇱🇾', '🇲🇦', '🇲🇨', '🇲🇩',
      '🇲🇪', '🇲🇫', '🇲🇬', '🇲🇭', '🇲🇰', '🇲🇱', '🇲🇲', '🇲🇳', '🇲🇴', '🇲🇵',
      '🇲🇶', '🇲🇷', '🇲🇸', '🇲🇹', '🇲🇺', '🇲🇻', '🇲🇼', '🇲🇽', '🇲🇾', '🇲🇿',
      '🇳🇦', '🇳🇨', '🇳🇪', '🇳🇫', '🇳🇬', '🇳🇮', '🇳🇱', '🇳🇴', '🇳🇵', '🇳🇷',
      '🇳🇺', '🇳🇿', '🇴🇲', '🇵🇦', '🇵🇪', '🇵🇫', '🇵🇬', '🇵🇭', '🇵🇰', '🇵🇱',
      '🇵🇲', '🇵🇳', '🇵🇷', '🇵🇸', '🇵🇹', '🇵🇼', '🇵🇾', '🇶🇦', '🇷🇪', '🇷🇴',
      '🇷🇸', '🇷🇺', '🇷🇼', '🇸🇦', '🇸🇧', '🇸🇨', '🇸🇩', '🇸🇪', '🇸🇬', '🇸🇭',
      '🇸🇮', '🇸🇯', '🇸🇰', '🇸🇱', '🇸🇲', '🇸🇳', '🇸🇴', '🇸🇷', '🇸🇸', '🇸🇹',
      '🇸🇻', '🇸🇽', '🇸🇾', '🇸🇿', '🇹🇦', '🇹🇨', '🇹🇩', '🇹🇫', '🇹🇬', '🇹🇭',
      '🇹🇯', '🇹🇰', '🇹🇱', '🇹🇲', '🇹🇳', '🇹🇴', '🇹🇷', '🇹🇹', '🇹🇻', '🇹🇼',
      '🇹🇿', '🇺🇦', '🇺🇬', '🇺🇲', '🇺🇳', '🇺🇸', '🇺🇾', '🇺🇿', '🇻🇦', '🇻🇨',
      '🇻🇪', '🇻🇬', '🇻🇮', '🇻🇳', '🇻🇺', '🇼🇫', '🇼🇸', '🇽🇰', '🇾🇪', '🇾🇹',
      '🇿🇦', '🇿🇲', '🇿🇼',
    ],
  };

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: _categorizedEmojis.length,
      child: AlertDialog(
        title: const Text('Select an Emoji'),
        contentPadding: const EdgeInsets.all(0), // TabBar와 TabBarView가 content 영역을 가득 채우도록
        content: SizedBox(
          width: double.maxFinite,
          height: MediaQuery.of(context).size.height * 0.6, // 다이얼로그 높이 조절
          child: Column(
            children: [
              TabBar(
                isScrollable: true, // 탭이 많을 경우 스크롤 가능하도록
                tabs: _categorizedEmojis.keys.map((category) {
                  return Tab(text: category.toString().split('.').last.replaceAllMapped(RegExp(r'([A-Z])'), (match) => ' ${match.group(1)!.toLowerCase()}').trim());
                }).toList(),
              ),
              Expanded(
                child: TabBarView(
                  children: _categorizedEmojis.keys.map((category) {
                    final emojis = _categorizedEmojis[category]!;
                    return GridView.builder(
                      padding: const EdgeInsets.all(8.0),
                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 6, // 한 줄에 6개 이모지
                        childAspectRatio: 1.0,
                        crossAxisSpacing: 4.0,
                        mainAxisSpacing: 4.0,
                      ),
                      itemCount: emojis.length,
                      itemBuilder: (context, index) {
                        final emoji = emojis[index];
                        return GestureDetector(
                          onTap: () {
                            Navigator.pop(context, emoji); // 선택된 이모지 반환
                          },
                          child: Container(
                            decoration: BoxDecoration(
                              color: emoji == currentEmoji ? Theme.of(context).colorScheme.primary.withOpacity(0.2) : null,
                              borderRadius: BorderRadius.circular(8.0),
                              border: Border.all(
                                color: emoji == currentEmoji ? Theme.of(context).colorScheme.primary : Colors.grey.shade300,
                                width: emoji == currentEmoji ? 2.0 : 1.0,
                              ),
                            ),
                            child: Center(
                              child: Text(
                                emoji,
                                style: const TextStyle(fontSize: 28),
                              ),
                            ),
                          ),
                        );
                      },
                    );
                  }).toList(),
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context); // 취소
            },
            child: const Text('Cancel'),
          ),
        ],
      ),
    );
  }
}
